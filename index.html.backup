<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1.0"/>
  <title>Foundry Cabinet · Co — Proposal Builder</title>

  <!-- Favicon (inline, never 404s) -->
  <link rel="icon"
        href='data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64"><rect width="100%" height="100%" fill="%230b1120"/><text x="50%" y="55%" dominant-baseline="middle" text-anchor="middle" font-size="36" fill="white">F</text></svg>'/>

  <!-- Fight GH Pages/browser caching of the app shell -->
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
  <meta http-equiv="Pragma" content="no-cache" />
  <meta http-equiv="Expires" content="0" />

  <!-- Simple CSS framework -->
  <style>
    /* Basic utility classes */
    .flex { display: flex; }
    .grid { display: grid; }
    .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    .gap-4 { gap: 1rem; }
    .gap-6 { gap: 1.5rem; }
    .gap-8 { gap: 2rem; }
    .justify-between { justify-content: space-between; }
    .justify-end { justify-content: flex-end; }
    .items-start { align-items: flex-start; }
    .items-center { align-items: center; }
    .space-x-2 > * + * { margin-left: 0.5rem; }
    .w-full { width: 100%; }
    .h-32 { height: 8rem; }
    .h-48 { height: 12rem; }
    .min-h-screen { min-height: 100vh; }
    .max-w-4xl { max-width: 56rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .p-4 { padding: 1rem; }
    .p-6 { padding: 1.5rem; }
    .p-8 { padding: 2rem; }
    .px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
    .py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }
    .pt-4 { padding-top: 1rem; }
    .pb-4 { padding-bottom: 1rem; }
    .mb-2 { margin-bottom: 0.5rem; }
    .mb-4 { margin-bottom: 1rem; }
    .mb-6 { margin-bottom: 1.5rem; }
    .mb-8 { margin-bottom: 2rem; }
    .mt-2 { margin-top: 0.5rem; }
    .mt-6 { margin-top: 1.5rem; }
    .mt-8 { margin-top: 2rem; }
    .bg-white { background-color: #ffffff; }
    .bg-gray-50 { background-color: #f9fafb; }
    .bg-gray-500 { background-color: #6b7280; }
    .bg-gray-600 { background-color: #4b5563; }
    .bg-blue-500 { background-color: #3b82f6; }
    .bg-blue-600 { background-color: #2563eb; }
    .bg-blue-700 { background-color: #1d4ed8; }
    .bg-green-600 { background-color: #059669; }
    .text-white { color: #ffffff; }
    .text-gray-600 { color: #4b5563; }
    .text-gray-700 { color: #374151; }
    .text-sm { font-size: 0.875rem; }
    .text-lg { font-size: 1.125rem; }
    .text-xl { font-size: 1.25rem; }
    .text-2xl { font-size: 1.5rem; }
    .text-3xl { font-size: 1.875rem; }
    .font-medium { font-weight: 500; }
    .font-semibold { font-weight: 600; }
    .font-bold { font-weight: 700; }
    .text-center { text-align: center; }
    .leading-relaxed { line-height: 1.625; }
    .border { border-width: 1px; border-color: #d1d5db; }
    .border-b { border-bottom-width: 1px; border-color: #d1d5db; }
    .border-b-2 { border-bottom-width: 2px; }
    .border-t-2 { border-top-width: 2px; }
    .rounded { border-radius: 0.25rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .shadow { box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); }
    .object-cover { object-fit: cover; }
    .object-contain { object-fit: contain; }
    .uppercase { text-transform: uppercase; }
    .tracking-wide { letter-spacing: 0.025em; }
    .cursor-pointer { cursor: pointer; }
    .hidden { display: none; }
    
    /* Button hover effects */
    .bg-gray-500:hover { background-color: #4b5563; }
    .bg-blue-500:hover { background-color: #2563eb; }
    .bg-blue-600:hover { background-color: #1d4ed8; }
    
    /* Form inputs */
    input, textarea, select {
      border: 1px solid #d1d5db;
      border-radius: 0.25rem;
      padding: 0.5rem 0.75rem;
      font-size: 0.875rem;
      background-color: #ffffff;
      width: 100%;
    }
    
    input:focus, textarea:focus, select:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    button {
      border: none;
      border-radius: 0.25rem;
      padding: 0.5rem 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: background-color 0.15s;
    }
    
    label {
      font-size: 0.75rem;
      font-weight: 500;
      color: #4b5563;
      text-transform: uppercase;
      letter-spacing: 0.025em;
      display: block;
      margin-bottom: 0.25rem;
    }
    
    textarea {
      min-height: 84px;
      resize: vertical;
    }
  </style>

  <style>
    :root { --header:#1e293b; --footer:#0b1120; }
    body { background:#f1f5f9; color:#111827; }
    .proposal-page { display:flex; flex-direction:column; min-height:800px; box-sizing:border-box; }
    .card { box-shadow: 0 6px 20px rgba(2,6,23,.08); }
    .logo-clean { display:block; max-height:160px; object-fit:contain; }

    /* Bigger image frames in preview */
    .img-frame { height: 21rem; }
    .img-frame-sm { height: 18rem; }
    .img-frame-layout { height: 26rem; }

    @media print {
      * { -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important; }
      .print\:hidden { display: none !important; }
      .proposal-page { width: 8.5in !important; height: 11in !important; margin: 0 !important; page-break-after: always !important; overflow: hidden !important; }
      @page { size: 8.5in 11in; margin: 0.5in; } /* breathing room */
      .two { display: grid !important; grid-template-columns: 1fr 1fr !important; gap: 28px !important; }
      .cols { display: grid !important; grid-template-columns: 1.1fr 0.9fr !important; gap: 28px !important; }
      .imgBox, .layoutImg, .tlItem, .nxItem { break-inside: avoid !important; page-break-inside: avoid !important; }
      img { break-inside: avoid !important; page-break-inside: avoid !important; }
    }
  </style>
</head>
<body>
  <div id="root"></div>

  <script type="text/babel">
    const { useState, useEffect } = React;
    const { createClient } = supabase;

    // ---------- CONFIG ----------
    // Safe inline fallback logo (white text) so header/footer never break:
    const INLINE_FALLBACK_LOGO =
      'data:image/svg+xml;utf8,' +
      encodeURIComponent(`<svg xmlns="http://www.w3.org/2000/svg" width="800" height="200" viewBox="0 0 800 200">
        <rect fill="none" width="800" height="200"/>
        <g fill="#ffffff" font-family="system-ui, -apple-system, Segoe UI, Roboto, Arial">
          <text x="50%" y="46%" text-anchor="middle" font-size="56" font-weight="700">FOUNDRY</text>
          <text x="50%" y="70%" text-anchor="middle" font-size="28" letter-spacing="4">CABINET · CO</text>
        </g>
      </svg>`);

    // ✅ Default to your real repo logo. If yours is in /assets/, change the path accordingly.
    const DEFAULT_LOGO_PATH = new URL('./Foundry-Cabinetco-Logo-2-White-Text.png', window.location.href).toString();

    const SUPABASE_URL = "https://nqzyoegnquyqfngmaktn.supabase.co";
    const SUPABASE_ANON_KEY =
      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5xenlvZWducXV5cWZuZ21ha3RuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NTkzNzYsImV4cCI6MjA3NDQzNTM3Nn0.lcQ8VW3zSdvyoZkJbhnT3CeyeYbxswEiAhZnAjo5Lac";
    const db = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    // ----------------------------

    // --- UI primitives
    const Label = ({children}) => <label className="text-xs font-medium text-slate-600 uppercase tracking-wide">{children}</label>;
    const Input = (props) => <input {...props} className={"w-full border rounded px-3 py-2 text-sm bg-white "+(props.className||"")} />;
    const TextArea = (props) => <textarea {...props} className={"w-full border rounded px-3 py-2 text-sm bg-white min-h-[84px] "+(props.className||"")} />;

    // --- image helpers ---
    const sleep = (ms)=> new Promise(r=>setTimeout(r, ms));
    const waitForImagesToLoad = async (root=document) => {
      const imgs = Array.from(root.querySelectorAll('img'))
        .filter(img => !img.complete || img.naturalWidth === 0);
      if (imgs.length === 0) return;
      await Promise.all(imgs.map(img => new Promise(res => {
        const done = () => res();
        img.onload = done; img.onerror = done;
      })));
    };

    // Force fresh fetch so export/print never reuses stale cached images (GH Pages etc.)
    const toDataURL = async (src) => {
      try {
        if (!src) return "";
        if (src.startsWith("data:")) return src; // already embedded (uploads)
        const url = new URL(src, window.location.href);
        url.searchParams.set("_v", Date.now().toString()); // cache-buster
        const res = await fetch(url.toString(), { cache: "no-store", mode: "cors" });
        if (!res.ok) throw new Error("fetch failed");
        const blob = await res.blob();
        // If cross-origin blocks reading, this will still work via fetch+blob
        const reader = new FileReader();
        const p = new Promise((resolve) => { reader.onloadend = () => resolve(reader.result || ""); });
        reader.readAsDataURL(blob);
        return await p;
      } catch (e) {
        // CORS or offline: fall back to raw src (works online), export HTML will still reference it
        return src;
      }
    };

    const embedAllImagesInState = async (images, setImages, fallbackLogo) => {
      const [logo, sh, eu, sv, ev, fp] = await Promise.all([
        toDataURL(images.logo || fallbackLogo),
        toDataURL(images.shakerRender),
        toDataURL(images.euroRender),
        toDataURL(images.shakerVanity),
        toDataURL(images.euroVanity),
        toDataURL(images.floorPlan),
      ]);
      setImages((prev) => ({
        ...prev,
        logo: logo || prev.logo,
        shakerRender: sh || prev.shakerRender,
        euroRender: eu || prev.euroRender,
        shakerVanity: sv || prev.shakerVanity,
        euroVanity: ev || prev.euroVanity,
        floorPlan: fp || prev.floorPlan,
      }));
    };

    function App() {
      const [formData, setFormData] = useState({
        clientName: '',
        projectName: '',
        date: new Date().toISOString().split('T')[0],
        description: '',
        price: '',
        timeline: '',
        notes: ''
      });

      const [images, setImages] = useState({
        logo: DEFAULT_LOGO_PATH,
        shakerRender: '',
        euroRender: '',
        shakerVanity: '',
        euroVanity: '',
        floorPlan: ''
      });

      const [currentView, setCurrentView] = useState('editor');

      const handleInputChange = (field, value) => {
        setFormData(prev => ({ ...prev, [field]: value }));
      };

      const handleImageUpload = (field, event) => {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            setImages(prev => ({ ...prev, [field]: e.target.result }));
          };
          reader.readAsDataURL(file);
        }
      };

      const generateProposal = async () => {
        await embedAllImagesInState(images, setImages, INLINE_FALLBACK_LOGO);
        setCurrentView('preview');
      };

      const printProposal = async () => {
        await waitForImagesToLoad();
        await sleep(500);
        window.print();
      };

      if (currentView === 'preview') {
        return (
          <div className="min-h-screen bg-gray-50">
            <div className="print:hidden bg-white border-b p-4 flex justify-between items-center">
              <h1 className="text-xl font-bold">Proposal Preview</h1>
              <div className="space-x-2">
                <button onClick={() => setCurrentView('editor')} className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">
                  Back to Editor
                </button>
                <button onClick={printProposal} className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                  Print / Export PDF
                </button>
              </div>
            </div>
            
            <div className="proposal-page bg-white mx-auto p-8">
              {/* Header */}
              <div className="flex justify-between items-start mb-8 pb-4 border-b-2" style={{borderColor: 'var(--header)'}}>
                <div>
                  <h1 className="text-3xl font-bold mb-2">{formData.projectName || 'Project Proposal'}</h1>
                  <p className="text-gray-600">For: {formData.clientName || 'Client Name'}</p>
                  <p className="text-gray-600">Date: {formData.date}</p>
                </div>
                <img src={images.logo} alt="Company Logo" className="logo-clean" />
              </div>

              {/* Project Description */}
              <div className="mb-8">
                <h2 className="text-xl font-semibold mb-4">Project Description</h2>
                <p className="text-gray-700 leading-relaxed">
                  {formData.description || 'Project description will appear here...'}
                </p>
              </div>

              {/* Images Grid */}
              <div className="mb-8">
                <h2 className="text-xl font-semibold mb-4">Design Options</h2>
                <div className="grid grid-cols-2 gap-6">
                  {images.shakerRender && (
                    <div className="imgBox">
                      <h3 className="font-medium mb-2">Shaker Style Render</h3>
                      <img src={images.shakerRender} alt="Shaker Render" className="w-full img-frame object-cover rounded" />
                    </div>
                  )}
                  {images.euroRender && (
                    <div className="imgBox">
                      <h3 className="font-medium mb-2">Euro Style Render</h3>
                      <img src={images.euroRender} alt="Euro Render" className="w-full img-frame object-cover rounded" />
                    </div>
                  )}
                  {images.shakerVanity && (
                    <div className="imgBox">
                      <h3 className="font-medium mb-2">Shaker Vanity</h3>
                      <img src={images.shakerVanity} alt="Shaker Vanity" className="w-full img-frame-sm object-cover rounded" />
                    </div>
                  )}
                  {images.euroVanity && (
                    <div className="imgBox">
                      <h3 className="font-medium mb-2">Euro Vanity</h3>
                      <img src={images.euroVanity} alt="Euro Vanity" className="w-full img-frame-sm object-cover rounded" />
                    </div>
                  )}
                </div>
                {images.floorPlan && (
                  <div className="mt-6">
                    <h3 className="font-medium mb-2">Floor Plan</h3>
                    <img src={images.floorPlan} alt="Floor Plan" className="w-full img-frame-layout object-contain rounded border" />
                  </div>
                )}
              </div>

              {/* Pricing & Timeline */}
              <div className="grid grid-cols-2 gap-8 mb-8">
                <div>
                  <h2 className="text-xl font-semibold mb-4">Investment</h2>
                  <p className="text-2xl font-bold text-green-600">
                    {formData.price ? `$${formData.price}` : 'Price TBD'}
                  </p>
                </div>
                <div>
                  <h2 className="text-xl font-semibold mb-4">Timeline</h2>
                  <p className="text-lg">
                    {formData.timeline || 'Timeline TBD'}
                  </p>
                </div>
              </div>

              {/* Notes */}
              {formData.notes && (
                <div className="mb-8">
                  <h2 className="text-xl font-semibold mb-4">Additional Notes</h2>
                  <p className="text-gray-700 leading-relaxed">{formData.notes}</p>
                </div>
              )}

              {/* Footer */}
              <div className="border-t-2 pt-4 mt-8 text-center text-gray-600" style={{borderColor: 'var(--footer)'}}>
                <p>Thank you for choosing Foundry Cabinet Co</p>
                <p className="text-sm mt-2">Contact us for any questions or modifications</p>
              </div>
            </div>
          </div>
        );
      }

      return (
        <div className="min-h-screen bg-gray-50">
          <div className="bg-white border-b p-4">
            <h1 className="text-2xl font-bold">Foundry Cabinet Co - Proposal Builder</h1>
          </div>

          <div className="max-w-4xl mx-auto p-6">
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-xl font-semibold mb-6">Project Information</h2>
              
              <div className="grid grid-cols-2 gap-6 mb-6">
                <div>
                  <Label>Client Name</Label>
                  <Input 
                    value={formData.clientName}
                    onChange={(e) => handleInputChange('clientName', e.target.value)}
                    placeholder="Enter client name"
                  />
                </div>
                <div>
                  <Label>Project Name</Label>
                  <Input 
                    value={formData.projectName}
                    onChange={(e) => handleInputChange('projectName', e.target.value)}
                    placeholder="Enter project name"
                  />
                </div>
                <div>
                  <Label>Date</Label>
                  <Input 
                    type="date"
                    value={formData.date}
                    onChange={(e) => handleInputChange('date', e.target.value)}
                  />
                </div>
                <div>
                  <Label>Price</Label>
                  <Input 
                    value={formData.price}
                    onChange={(e) => handleInputChange('price', e.target.value)}
                    placeholder="Enter price (numbers only)"
                  />
                </div>
              </div>

              <div className="mb-6">
                <Label>Project Description</Label>
                <TextArea 
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  placeholder="Describe the project details..."
                />
              </div>

              <div className="mb-6">
                <Label>Timeline</Label>
                <Input 
                  value={formData.timeline}
                  onChange={(e) => handleInputChange('timeline', e.target.value)}
                  placeholder="e.g., 4-6 weeks"
                />
              </div>

              <div className="mb-6">
                <Label>Additional Notes</Label>
                <TextArea 
                  value={formData.notes}
                  onChange={(e) => handleInputChange('notes', e.target.value)}
                  placeholder="Any additional notes or terms..."
                />
              </div>

              <h2 className="text-xl font-semibold mb-6">Images</h2>
              
              <div className="grid grid-cols-2 gap-6 mb-6">
                <div>
                  <Label>Shaker Style Render</Label>
                  <input 
                    type="file" 
                    accept="image/*"
                    onChange={(e) => handleImageUpload('shakerRender', e)}
                    className="w-full border rounded px-3 py-2 text-sm"
                  />
                  {images.shakerRender && (
                    <img src={images.shakerRender} alt="Preview" className="mt-2 w-full h-32 object-cover rounded" />
                  )}
                </div>
                <div>
                  <Label>Euro Style Render</Label>
                  <input 
                    type="file" 
                    accept="image/*"
                    onChange={(e) => handleImageUpload('euroRender', e)}
                    className="w-full border rounded px-3 py-2 text-sm"
                  />
                  {images.euroRender && (
                    <img src={images.euroRender} alt="Preview" className="mt-2 w-full h-32 object-cover rounded" />
                  )}
                </div>
                <div>
                  <Label>Shaker Vanity</Label>
                  <input 
                    type="file" 
                    accept="image/*"
                    onChange={(e) => handleImageUpload('shakerVanity', e)}
                    className="w-full border rounded px-3 py-2 text-sm"
                  />
                  {images.shakerVanity && (
                    <img src={images.shakerVanity} alt="Preview" className="mt-2 w-full h-32 object-cover rounded" />
                  )}
                </div>
                <div>
                  <Label>Euro Vanity</Label>
                  <input 
                    type="file" 
                    accept="image/*"
                    onChange={(e) => handleImageUpload('euroVanity', e)}
                    className="w-full border rounded px-3 py-2 text-sm"
                  />
                  {images.euroVanity && (
                    <img src={images.euroVanity} alt="Preview" className="mt-2 w-full h-32 object-cover rounded" />
                  )}
                </div>
              </div>

              <div className="mb-6">
                <Label>Floor Plan</Label>
                <input 
                  type="file" 
                  accept="image/*"
                  onChange={(e) => handleImageUpload('floorPlan', e)}
                  className="w-full border rounded px-3 py-2 text-sm"
                />
                {images.floorPlan && (
                  <img src={images.floorPlan} alt="Preview" className="mt-2 w-full h-48 object-contain rounded border" />
                )}
              </div>

              <div className="flex justify-end">
                <button 
                  onClick={generateProposal}
                  className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
                >
                  Generate Proposal Preview
                </button>
              </div>
            </div>
          </div>
        </div>
      );
    }

    ReactDOM.createRoot(document.getElementById('root')).render(<App />);
  </script>
</body>
</html>
